{
  "name": "LINE Gemini Bot Simplified",
  "nodes": [
    {
      "parameters": {
        "path": "line-gemini-webhook",
        "httpMethod": "POST",
        "responseMode": "lastNode",
        "options": {}
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [250, 300],
      "id": "webhook-node",
      "webhookId": "line-webhook-id",
      "notes": "LINEからのWebhookを受信"
    },
    {
      "parameters": {
        "functionCode": "// LINE署名検証とメッセージ解析\nconst crypto = require('crypto');\nconst body = JSON.stringify($input.item.json.body);\nconst signature = $input.item.json.headers['x-line-signature'];\nconst channelSecret = 'YOUR_CHANNEL_SECRET';\n\n// 署名検証\nif (signature) {\n  const hash = crypto.createHmac('SHA256', channelSecret).update(body).digest('base64');\n  if (hash !== signature) {\n    throw new Error('Invalid signature');\n  }\n}\n\n// メッセージ解析\nconst event = $input.item.json.body.events?.[0];\nif (!event || event.type !== 'message') {\n  return [];\n}\n\nconst messageType = event.message.type;\nconst replyToken = event.replyToken;\nconst text = event.message.text || '';\nconst messageId = event.message.id;\n\n// 処理タイプの判定\nlet processType = 'text';\nlet imagePrompt = '';\n\nif (messageType === 'audio') {\n  processType = 'audio';\n} else if (messageType === 'text' && text.startsWith('画像生成:')) {\n  processType = 'image';\n  imagePrompt = text.substring(5).trim();\n}\n\nreturn [{\n  json: {\n    messageType,\n    replyToken,\n    text,\n    processType,\n    imagePrompt,\n    messageId,\n    userId: event.source.userId\n  }\n}];"
      },
      "name": "Process Message",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [450, 300],
      "id": "process-message",
      "notes": "署名検証とメッセージタイプ判定"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.processType }}",
              "value2": "text"
            }
          ]
        }
      },
      "name": "Route Text",
      "type": "n8n-nodes-base.if",
      "typeVersion": 3,
      "position": [650, 200],
      "id": "route-text",
      "notes": "テキストメッセージの判定"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.processType }}",
              "value2": "image"
            }
          ]
        }
      },
      "name": "Route Image",
      "type": "n8n-nodes-base.if",
      "typeVersion": 3,
      "position": [650, 300],
      "id": "route-image",
      "notes": "画像生成リクエストの判定"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.processType }}",
              "value2": "audio"
            }
          ]
        }
      },
      "name": "Route Audio",
      "type": "n8n-nodes-base.if",
      "typeVersion": 3,
      "position": [650, 400],
      "id": "route-audio",
      "notes": "音声メッセージの判定"
    },
    {
      "parameters": {
        "resource": "text",
        "operation": "message",
        "modelId": {
          "__rl": true,
          "mode": "list",
          "value": "gemini-2.5-pro"
        },
        "prompt": "={{ $json.text }}",
        "simplifyOutput": true
      },
      "name": "Gemini Text",
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [850, 100],
      "id": "gemini-text",
      "credentials": {
        "googleGeminiApi": {
          "id": "gemini-api-id"
        }
      },
      "notes": "Gemini 2.5 Proでテキスト応答"
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "generate",
        "modelId": {
          "__rl": true,
          "mode": "list",
          "value": "imagen-4"
        },
        "prompt": "={{ $json.imagePrompt }}",
        "simplifyOutput": true
      },
      "name": "Gemini Image",
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [850, 300],
      "id": "gemini-image",
      "credentials": {
        "googleGeminiApi": {
          "id": "gemini-api-id"
        }
      },
      "notes": "Imagen 4で画像生成"
    },
    {
      "parameters": {
        "url": "=https://api-data.line.me/v2/bot/message/{{ $json.messageId }}/content",
        "method": "GET",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer YOUR_CHANNEL_ACCESS_TOKEN"
            }
          ]
        },
        "responseFormat": "file",
        "options": {}
      },
      "name": "Download Audio",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [850, 500],
      "id": "download-audio",
      "notes": "LINE音声ファイルをダウンロード"
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "modelId": {
          "__rl": true,
          "mode": "list",
          "value": "gemini-2.5-flash"
        },
        "audioDataBinary": "data",
        "simplifyOutput": true
      },
      "name": "Gemini Audio",
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [1050, 500],
      "id": "gemini-audio",
      "credentials": {
        "googleGeminiApi": {
          "id": "gemini-api-id"
        }
      },
      "notes": "Gemini 2.5 Flashで音声文字起こし"
    },
    {
      "parameters": {
        "functionCode": "// LINE返信メッセージの構築\nconst replyToken = $json.replyToken;\nlet messages = [];\n\n// 処理タイプに応じてメッセージを構築\nif ($json.processType === 'image' && $json.imageUrl) {\n  // 画像メッセージ\n  messages = [{\n    type: 'image',\n    originalContentUrl: $json.imageUrl,\n    previewImageUrl: $json.imageUrl\n  }];\n} else if ($json.processType === 'audio' && $json.transcription) {\n  // 音声文字起こし結果\n  messages = [{\n    type: 'text',\n    text: `文字起こし結果:\\n${$json.transcription}`\n  }];\n} else {\n  // テキストメッセージ\n  const responseText = $json.text || $json.response || 'メッセージを受信しました';\n  messages = [{\n    type: 'text',\n    text: responseText.substring(0, 5000)\n  }];\n}\n\nreturn [{\n  json: {\n    replyToken,\n    messages\n  }\n}];"
      },
      "name": "Format Reply",
      "type": "n8n-nodes-base.function", 
      "typeVersion": 1,
      "position": [1250, 300],
      "id": "format-reply",
      "notes": "返信フォーマット作成"
    },
    {
      "parameters": {
        "url": "https://api.line.me/v2/bot/message/reply",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer YOUR_CHANNEL_ACCESS_TOKEN"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "name": "Reply to LINE",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1450, 300],
      "id": "line-reply",
      "notes": "LINEへ返信送信"
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Process Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Message": {
      "main": [
        [
          {
            "node": "Route Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Text": {
      "main": [
        [
          {
            "node": "Gemini Text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Route Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Image": {
      "main": [
        [
          {
            "node": "Gemini Image",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Route Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Audio": {
      "main": [
        [
          {
            "node": "Download Audio",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini Text": {
      "main": [
        [
          {
            "node": "Format Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini Image": {
      "main": [
        [
          {
            "node": "Format Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Audio": {
      "main": [
        [
          {
            "node": "Gemini Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini Audio": {
      "main": [
        [
          {
            "node": "Format Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Reply": {
      "main": [
        [
          {
            "node": "Reply to LINE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "versionId": "v2-simplified",
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveExecutionProgress": true,
    "saveDataSuccessExecution": "all",
    "saveDataErrorExecution": "all"
  },
  "id": "line-gemini-simplified",
  "tags": [],
  "pinData": {},
  "staticData": null
}