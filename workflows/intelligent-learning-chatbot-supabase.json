{
  "name": "Intelligent Learning Chatbot - Supabase Edition",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chatbot",
        "responseMode": "responseNode",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 340],
      "webhookId": "chatbot-webhook"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.message}}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "input-validation",
      "name": "Input Validation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [480, 340]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "session-id",
              "name": "sessionId",
              "value": "={{$json.sessionId || $uuid()}}",
              "type": "string"
            },
            {
              "id": "user-message",
              "name": "userMessage",
              "value": "={{$json.message}}",
              "type": "string"
            },
            {
              "id": "user-id",
              "name": "userId",
              "value": "={{$json.userId || 'anonymous'}}",
              "type": "string"
            },
            {
              "id": "timestamp",
              "name": "timestamp",
              "value": "={{$now.toISO()}}",
              "type": "string"
            },
            {
              "id": "enable-feedback",
              "name": "enableFeedback",
              "value": "={{$json.enableFeedback !== false}}",
              "type": "boolean"
            },
            {
              "id": "enable-rag",
              "name": "enableRAG",
              "value": "={{$json.enableRAG !== false}}",
              "type": "boolean"
            }
          ]
        },
        "options": {}
      },
      "id": "extract-session",
      "name": "Extract Session Info",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [700, 260]
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "sessions",
        "filterType": "string",
        "filters": {
          "conditions": [
            {
              "field": "id",
              "condition": "eq",
              "value": "={{$json.sessionId}}"
            },
            {
              "field": "is_active",
              "condition": "eq",
              "value": "true"
            }
          ]
        },
        "options": {
          "select": "*",
          "limit": 1
        }
      },
      "id": "check-session",
      "name": "Check Session",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [920, 260],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$json.length}}",
              "operation": "larger",
              "value2": 0
            }
          ]
        },
        "options": {}
      },
      "id": "session-exists",
      "name": "Session Exists?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1140, 260]
    },
    {
      "parameters": {
        "operation": "create",
        "tableId": "sessions",
        "dataToSend": "defineBelow",
        "fieldsToSend": {
          "values": [
            {
              "field": "id",
              "fieldValue": "={{$('Extract Session Info').item.json.sessionId}}"
            },
            {
              "field": "user_id",
              "fieldValue": "={{$('Extract Session Info').item.json.userId}}"
            },
            {
              "field": "started_at",
              "fieldValue": "={{$now.toISO()}}"
            },
            {
              "field": "last_activity",
              "fieldValue": "={{$now.toISO()}}"
            },
            {
              "field": "is_active",
              "fieldValue": "=true"
            }
          ]
        }
      },
      "id": "create-session",
      "name": "Create New Session",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1360, 380],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "sessions",
        "filterType": "string",
        "filters": {
          "conditions": [
            {
              "field": "id",
              "condition": "eq",
              "value": "={{$json[0].id}}"
            }
          ]
        },
        "dataToSend": "defineBelow",
        "fieldsToSend": {
          "values": [
            {
              "field": "last_activity",
              "fieldValue": "={{$now.toISO()}}"
            }
          ]
        }
      },
      "id": "update-session",
      "name": "Update Session Activity",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1360, 140],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {}
      },
      "id": "merge-session",
      "name": "Merge Session Data",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [1580, 260]
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "conversations",
        "filterType": "string",
        "filters": {
          "conditions": [
            {
              "field": "session_id",
              "condition": "eq",
              "value": "={{$('Extract Session Info').item.json.sessionId}}"
            }
          ]
        },
        "options": {
          "select": "id,user_message,ai_response,created_at",
          "order": "created_at.desc",
          "limit": 10
        }
      },
      "id": "load-history",
      "name": "Load Conversation History",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1800, 140],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{$('Extract Session Info').item.json.userMessage}}",
        "hasOutputParser": false,
        "options": {
          "systemMessage": "あなたは親切で知識豊富なAIアシスタントです。\n\n## 重要な指示:\n- 会話履歴を参考にして一貫性のある応答を提供する\n- ユーザーが以前提供した情報を覚えて活用する\n- 自然で親しみやすい口調を保つ\n- フィードバックから学習した改善を適用する\n- 簡潔で分かりやすい説明を心がける\n\n## 会話履歴:\n{{$('Load Conversation History').all().map(c => `User: ${c.json.user_message}\\nAI: ${c.json.ai_response}`).join('\\n\\n')}}\n\n## セッション情報:\n- セッションID: {{$('Extract Session Info').item.json.sessionId}}\n- ユーザーID: {{$('Extract Session Info').item.json.userId}}",
          "maxIterations": 10,
          "returnIntermediateSteps": false
        }
      },
      "id": "ai-agent",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [2020, 260]
    },
    {
      "parameters": {
        "model": "gpt-3.5-turbo",
        "options": {
          "temperature": 0.7,
          "maxTokensToSample": 1000,
          "topP": 0.9,
          "frequencyPenalty": 0.3,
          "presencePenalty": 0.3
        }
      },
      "id": "openai-model",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [2020, 660],
      "credentials": {
        "openAiApi": {
          "id": "openai-credentials",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "operation": "create",
        "tableId": "conversations",
        "dataToSend": "defineBelow",
        "fieldsToSend": {
          "values": [
            {
              "field": "session_id",
              "fieldValue": "={{$('Extract Session Info').item.json.sessionId}}"
            },
            {
              "field": "user_message",
              "fieldValue": "={{$('Extract Session Info').item.json.userMessage}}"
            },
            {
              "field": "ai_response",
              "fieldValue": "={{$('AI Agent').item.json.output}}"
            },
            {
              "field": "user_id",
              "fieldValue": "={{$('Extract Session Info').item.json.userId}}"
            },
            {
              "field": "context_type",
              "fieldValue": "general"
            },
            {
              "field": "metadata",
              "fieldValue": "={{JSON.stringify({timestamp: $now.toISO(), ragEnabled: $('Extract Session Info').item.json.enableRAG})}}"
            }
          ]
        },
        "options": {
          "returnFields": "id,created_at"
        }
      },
      "id": "save-conversation",
      "name": "Save Conversation",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [2460, 260],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "response",
              "name": "response",
              "value": "={{$('AI Agent').item.json.output}}",
              "type": "string"
            },
            {
              "id": "session-id",
              "name": "sessionId",
              "value": "={{$('Extract Session Info').item.json.sessionId}}",
              "type": "string"
            },
            {
              "id": "conversation-id",
              "name": "conversationId",
              "value": "={{$json.id}}",
              "type": "string"
            },
            {
              "id": "timestamp",
              "name": "timestamp",
              "value": "={{$json.created_at}}",
              "type": "string"
            },
            {
              "id": "status",
              "name": "status",
              "value": "success",
              "type": "string"
            },
            {
              "id": "feedback-enabled",
              "name": "feedbackEnabled",
              "value": "={{$('Extract Session Info').item.json.enableFeedback}}",
              "type": "boolean"
            },
            {
              "id": "feedback-url",
              "name": "feedbackUrl",
              "value": "={{$('Extract Session Info').item.json.enableFeedback ? '/webhook/chatbot/feedback' : null}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "format-response",
      "name": "Format Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [2680, 260]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "respond-webhook",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2900, 260]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chatbot/feedback",
        "responseMode": "responseNode",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "feedback-webhook",
      "name": "Feedback Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 700],
      "webhookId": "chatbot-feedback-webhook"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.sessionId}}",
              "operation": "isNotEmpty"
            },
            {
              "value1": "={{$json.conversationId}}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "validate-feedback",
      "name": "Validate Feedback",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [480, 700]
    },
    {
      "parameters": {
        "operation": "create",
        "tableId": "feedback",
        "dataToSend": "defineBelow",
        "fieldsToSend": {
          "values": [
            {
              "field": "conversation_id",
              "fieldValue": "={{$json.conversationId}}"
            },
            {
              "field": "session_id",
              "fieldValue": "={{$json.sessionId}}"
            },
            {
              "field": "rating",
              "fieldValue": "={{$json.rating}}"
            },
            {
              "field": "is_helpful",
              "fieldValue": "={{$json.isHelpful}}"
            },
            {
              "field": "feedback_text",
              "fieldValue": "={{$json.feedbackText || ''}}"
            },
            {
              "field": "feedback_type",
              "fieldValue": "={{$json.feedbackType || 'general'}}"
            }
          ]
        },
        "options": {
          "returnFields": "id,created_at"
        }
      },
      "id": "save-feedback",
      "name": "Save Feedback",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [700, 620],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.improvedResponse}}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "has-improvement",
      "name": "Has Improvement?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [920, 620]
    },
    {
      "parameters": {
        "operation": "create",
        "tableId": "learning_improvements",
        "dataToSend": "defineBelow",
        "fieldsToSend": {
          "values": [
            {
              "field": "feedback_id",
              "fieldValue": "={{$('Save Feedback').item.json.id}}"
            },
            {
              "field": "original_response",
              "fieldValue": "={{$json.originalResponse}}"
            },
            {
              "field": "improved_response",
              "fieldValue": "={{$json.improvedResponse}}"
            },
            {
              "field": "improvement_type",
              "fieldValue": "user_correction"
            },
            {
              "field": "applied",
              "fieldValue": "=false"
            }
          ]
        }
      },
      "id": "save-improvement",
      "name": "Save Improvement",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1140, 540],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "message",
              "name": "message",
              "value": "フィードバックを受け付けました",
              "type": "string"
            },
            {
              "id": "feedback-id",
              "name": "feedbackId",
              "value": "={{$('Save Feedback').item.json.id}}",
              "type": "string"
            },
            {
              "id": "improvement-saved",
              "name": "improvementSaved",
              "value": "={{$('Save Improvement').item.json ? true : false}}",
              "type": "boolean"
            },
            {
              "id": "status",
              "name": "status",
              "value": "success",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "format-feedback-response",
      "name": "Format Feedback Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [1360, 620]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "respond-feedback",
      "name": "Respond to Feedback",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1580, 620]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chatbot/knowledge/add",
        "responseMode": "responseNode",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "add-knowledge-webhook",
      "name": "Add Knowledge Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 900],
      "webhookId": "add-knowledge-webhook"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "title",
              "name": "title",
              "value": "={{$json.title}}",
              "type": "string"
            },
            {
              "id": "content",
              "name": "content",
              "value": "={{$json.content}}",
              "type": "string"
            },
            {
              "id": "category",
              "name": "category",
              "value": "={{$json.category || 'general'}}",
              "type": "string"
            },
            {
              "id": "source",
              "name": "source",
              "value": "={{$json.source || 'manual'}}",
              "type": "string"
            },
            {
              "id": "pageContent",
              "name": "pageContent",
              "value": "={{$json.title + '\\n\\n' + $json.content}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "prepare-document",
      "name": "Prepare Document",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [480, 900]
    },
    {
      "parameters": {
        "dataType": "json",
        "value1": "={{JSON.stringify({pageContent: $json.pageContent, metadata: {title: $json.title, category: $json.category, source: $json.source}})}}",
        "options": {}
      },
      "id": "json-document",
      "name": "Create JSON Document",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [700, 900]
    },
    {
      "parameters": {
        "operation": "create",
        "tableId": "knowledge_base",
        "dataToSend": "defineBelow",
        "fieldsToSend": {
          "values": [
            {
              "field": "title",
              "fieldValue": "={{$('Prepare Document').item.json.title}}"
            },
            {
              "field": "content",
              "fieldValue": "={{$('Prepare Document').item.json.content}}"
            },
            {
              "field": "category",
              "fieldValue": "={{$('Prepare Document').item.json.category}}"
            },
            {
              "field": "tags",
              "fieldValue": "={{[$('Prepare Document').item.json.category]}}"
            },
            {
              "field": "source_url",
              "fieldValue": "={{$('Prepare Document').item.json.source}}"
            }
          ]
        },
        "options": {
          "returnFields": "id,title,created_at"
        }
      },
      "id": "save-to-knowledge-base",
      "name": "Save to Knowledge Base",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [920, 900],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "message",
              "name": "message",
              "value": "ナレッジベースに追加しました",
              "type": "string"
            },
            {
              "id": "knowledge-id",
              "name": "knowledgeId",
              "value": "={{$json.id}}",
              "type": "string"
            },
            {
              "id": "title",
              "name": "title",
              "value": "={{$json.title}}",
              "type": "string"
            },
            {
              "id": "created-at",
              "name": "createdAt",
              "value": "={{$json.created_at}}",
              "type": "string"
            },
            {
              "id": "status",
              "name": "status",
              "value": "success",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "knowledge-response",
      "name": "Knowledge Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [1140, 900]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "respond-knowledge",
      "name": "Respond to Knowledge",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1360, 900]
    },
    {
      "parameters": {
        "content": "## 📚 ナレッジベース管理エンドポイント\n\nこのセクションは独立したナレッジ管理用のワークフローです。\n\n### 使用方法:\n```json\nPOST /webhook/chatbot/knowledge/add\n{\n  \"title\": \"ドキュメントのタイトル\",\n  \"content\": \"ドキュメントの内容\",\n  \"category\": \"カテゴリー（省略可）\",\n  \"source\": \"ソース情報（省略可）\"\n}\n```\n\n### 処理フロー:\n1. Webhookでデータ受信\n2. ドキュメントデータを準備\n3. Supabaseのknowledge_baseテーブルに保存\n4. 保存したデータは自動的にVector Storeで検索可能になる\n\n### 注意:\n- Vector embeddingsは別途バッチ処理で生成される\n- メインのチャットボットワークフローとは独立して動作",
        "height": 400,
        "width": 350
      },
      "id": "knowledge-sticky-note",
      "name": "Knowledge Management Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [220, 1080]
    },
    {
      "parameters": {
        "content": "## 🤖 AI Agentについて\n\n現在のワークフローではAI Agentを使用しています。\n\n### AI Agentの特徴:\n- 会話履歴の管理\n- セッション情報の活用\n- 柔軟な応答生成\n\n### RAG機能について:\n現在、Vector Store検索は実装されていません。\nRAG機能が必要な場合は以下の選択肢があります：\n\n1. **RetrievalQA Chain**を使用（AI Agentを置き換え）\n2. **カスタムツール**を作成してAI Agentに接続\n3. **別のワークフロー**でVector検索を実装\n\n### 現在の実装:\n- 会話履歴はSupabaseに保存\n- ナレッジベースへの追加は可能\n- ベクトル検索は未実装",
        "height": 350,
        "width": 400
      },
      "id": "ai-agent-note",
      "name": "AI Agent Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [2420, 200]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "error-message",
              "name": "error",
              "value": "メッセージが空です。'message'フィールドに質問を入力してください。",
              "type": "string"
            },
            {
              "id": "error-status",
              "name": "status",
              "value": "error",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "validation-error",
      "name": "Validation Error",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [700, 420]
    },
    {
      "parameters": {
        "options": {
          "responseCode": 400
        }
      },
      "id": "validation-error-response",
      "name": "Validation Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [920, 420]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "error-message",
              "name": "error",
              "value": "フィードバックの検証に失敗しました。",
              "type": "string"
            },
            {
              "id": "error-status",
              "name": "status",
              "value": "error",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "feedback-validation-error",
      "name": "Feedback Validation Error",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [700, 780]
    },
    {
      "parameters": {
        "options": {
          "responseCode": 400
        }
      },
      "id": "feedback-error-response",
      "name": "Feedback Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [920, 780]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Input Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input Validation": {
      "main": [
        [
          {
            "node": "Extract Session Info",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Validation Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Session Info": {
      "main": [
        [
          {
            "node": "Check Session",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Session": {
      "main": [
        [
          {
            "node": "Session Exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Session Exists?": {
      "main": [
        [
          {
            "node": "Update Session Activity",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create New Session",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Session Activity": {
      "main": [
        [
          {
            "node": "Merge Session Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create New Session": {
      "main": [
        [
          {
            "node": "Merge Session Data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Session Data": {
      "main": [
        [
          {
            "node": "Load Conversation History",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Conversation History": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Save Conversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Save Conversation": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Response": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Feedback Webhook": {
      "main": [
        [
          {
            "node": "Validate Feedback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Feedback": {
      "main": [
        [
          {
            "node": "Save Feedback",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Feedback Validation Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Feedback": {
      "main": [
        [
          {
            "node": "Has Improvement?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Improvement?": {
      "main": [
        [
          {
            "node": "Save Improvement",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format Feedback Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Improvement": {
      "main": [
        [
          {
            "node": "Format Feedback Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Feedback Response": {
      "main": [
        [
          {
            "node": "Respond to Feedback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Knowledge Webhook": {
      "main": [
        [
          {
            "node": "Prepare Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Document": {
      "main": [
        [
          {
            "node": "Create JSON Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create JSON Document": {
      "main": [
        [
          {
            "node": "Save to Knowledge Base",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Knowledge Base": {
      "main": [
        [
          {
            "node": "Knowledge Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Knowledge Response": {
      "main": [
        [
          {
            "node": "Respond to Knowledge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validation Error": {
      "main": [
        [
          {
            "node": "Validation Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Feedback Validation Error": {
      "main": [
        [
          {
            "node": "Feedback Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveExecutionProgress": true,
    "saveDataSuccessExecution": "all",
    "saveDataErrorExecution": "all",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "",
    "timezone": "Asia/Tokyo"
  },
  "versionId": "supabase-rag-edition",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "intelligent-learning-chatbot-supabase",
    "description": "Intelligent learning chatbot with Supabase integration, Vector Store RAG, and feedback system"
  },
  "id": "intelligent-learning-chatbot-supabase",
  "tags": [
    {
      "id": "chatbot",
      "name": "Chatbot"
    },
    {
      "id": "ai",
      "name": "AI"
    },
    {
      "id": "supabase",
      "name": "Supabase"
    },
    {
      "id": "rag",
      "name": "RAG"
    },
    {
      "id": "vector",
      "name": "Vector"
    }
  ]
}