{
  "name": "Intelligent Learning Chatbot - Phase 2",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chatbot",
        "responseMode": "responseNode",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 340],
      "webhookId": "chatbot-webhook"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.message}}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "input-validation",
      "name": "Input Validation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [480, 340]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "session-id",
              "name": "sessionId",
              "value": "={{$json.sessionId || $uuid()}}",
              "type": "string"
            },
            {
              "id": "user-message",
              "name": "userMessage",
              "value": "={{$json.message}}",
              "type": "string"
            },
            {
              "id": "user-id",
              "name": "userId",
              "value": "={{$json.userId || 'anonymous'}}",
              "type": "string"
            },
            {
              "id": "timestamp",
              "name": "timestamp",
              "value": "={{$now.toISO()}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "extract-session",
      "name": "Extract Session Info",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [700, 260]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT s.*, \n       (SELECT json_agg(row_to_json(c.*)) \n        FROM (SELECT user_message, ai_response, created_at \n              FROM conversations \n              WHERE session_id = $1 \n              ORDER BY created_at DESC \n              LIMIT 5) c) as history\nFROM sessions s\nWHERE s.session_id = $1::uuid\nAND s.is_active = true;",
        "options": {
          "queryParams": "={{$json.sessionId}}"
        }
      },
      "id": "check-session",
      "name": "Check Session History",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [920, 260],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials",
          "name": "PostgreSQL"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$json.length}}",
              "operation": "larger",
              "value2": 0
            }
          ]
        }
      },
      "id": "session-exists",
      "name": "Session Exists?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1140, 260]
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "sessions",
        "columns": "session_id,user_id,started_at,last_activity",
        "options": {
          "returnFields": "*"
        }
      },
      "id": "create-session",
      "name": "Create New Session",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1360, 380],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials",
          "name": "PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "table": "sessions",
        "updateKey": "session_id",
        "columns": "last_activity",
        "options": {
          "returnFields": "*"
        }
      },
      "id": "update-session",
      "name": "Update Session Activity",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1360, 140],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials",
          "name": "PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {}
      },
      "id": "merge-session",
      "name": "Merge Session Data",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [1580, 260]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "system-prompt",
              "name": "systemPrompt",
              "value": "あなたは親切で知識豊富なアシスタントです。以下の会話履歴を参考にして、一貫性のある応答を提供してください。\n\n過去の会話履歴:\n{{$json.history ? JSON.stringify($json.history) : 'なし'}}\n\nユーザーの質問に対して、正確で役立つ回答を提供してください。",
              "type": "string"
            },
            {
              "id": "conversation-context",
              "name": "conversationContext",
              "value": "={{$json.history || []}}",
              "type": "json"
            }
          ]
        },
        "options": {}
      },
      "id": "build-context",
      "name": "Build Conversation Context",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [1800, 260]
    },
    {
      "parameters": {
        "resource": "chat",
        "operation": "complete",
        "model": "gpt-3.5-turbo",
        "prompt": {
          "messages": [
            {
              "role": "system",
              "content": "={{$json.systemPrompt}}"
            },
            {
              "role": "user",
              "content": "={{$('Extract Session Info').item.json.userMessage}}"
            }
          ]
        },
        "simplifyOutput": true,
        "options": {
          "temperature": 0.7,
          "maxTokens": 1000,
          "frequencyPenalty": 0,
          "presencePenalty": 0
        }
      },
      "id": "openai-chat",
      "name": "OpenAI Chat with Context",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1.1,
      "position": [2020, 260],
      "credentials": {
        "openAiApi": {
          "id": "openai-credentials",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "conversations",
        "columns": "session_id,user_message,ai_response,user_id,metadata",
        "options": {
          "returnFields": "id,session_id,created_at"
        }
      },
      "id": "save-conversation",
      "name": "Save Conversation",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [2240, 260],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials",
          "name": "PostgreSQL"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "response",
              "name": "response",
              "value": "={{$('OpenAI Chat with Context').item.json.message.content}}",
              "type": "string"
            },
            {
              "id": "session-id-response",
              "name": "sessionId",
              "value": "={{$('Extract Session Info').item.json.sessionId}}",
              "type": "string"
            },
            {
              "id": "conversation-id",
              "name": "conversationId",
              "value": "={{$json.id}}",
              "type": "string"
            },
            {
              "id": "timestamp-response",
              "name": "timestamp",
              "value": "={{$json.created_at}}",
              "type": "string"
            },
            {
              "id": "status",
              "name": "status",
              "value": "success",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "format-response",
      "name": "Format Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [2460, 260]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "respond-webhook",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2680, 260]
    },
    {
      "parameters": {},
      "id": "error-trigger",
      "name": "Error Trigger",
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [920, 540]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "error-data",
              "name": "errorData",
              "value": "={{JSON.stringify($json)}}",
              "type": "string"
            },
            {
              "id": "backup-timestamp",
              "name": "timestamp",
              "value": "={{$now.toISO()}}",
              "type": "string"
            },
            {
              "id": "session-backup",
              "name": "sessionId",
              "value": "={{$('Extract Session Info').item.json.sessionId}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "prepare-backup",
      "name": "Prepare Backup Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [1140, 540]
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=backup/conversation_{{$json.sessionId}}_{{$now.format('yyyy-MM-dd-HH-mm-ss')}}.json",
        "options": {}
      },
      "id": "file-backup",
      "name": "File Backup",
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [1360, 540]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "error-message",
              "name": "error",
              "value": "メッセージが空です。'message'フィールドに質問を入力してください。",
              "type": "string"
            },
            {
              "id": "error-status",
              "name": "status",
              "value": "error",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "error-response",
      "name": "Error Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [700, 420]
    },
    {
      "parameters": {
        "options": {
          "responseCode": 400
        }
      },
      "id": "error-webhook-response",
      "name": "Error Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [920, 420]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Input Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input Validation": {
      "main": [
        [
          {
            "node": "Extract Session Info",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Session Info": {
      "main": [
        [
          {
            "node": "Check Session History",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Session History": {
      "main": [
        [
          {
            "node": "Session Exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Session Exists?": {
      "main": [
        [
          {
            "node": "Update Session Activity",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create New Session",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Session Activity": {
      "main": [
        [
          {
            "node": "Merge Session Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create New Session": {
      "main": [
        [
          {
            "node": "Merge Session Data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Session Data": {
      "main": [
        [
          {
            "node": "Build Conversation Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Conversation Context": {
      "main": [
        [
          {
            "node": "OpenAI Chat with Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat with Context": {
      "main": [
        [
          {
            "node": "Save Conversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Conversation": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Response": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Trigger": {
      "main": [
        [
          {
            "node": "Prepare Backup Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Backup Data": {
      "main": [
        [
          {
            "node": "File Backup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Response": {
      "main": [
        [
          {
            "node": "Error Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveExecutionProgress": true,
    "saveDataSuccessExecution": "all",
    "saveDataErrorExecution": "all",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "",
    "timezone": "Asia/Tokyo"
  },
  "versionId": "phase-2-session-management",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "intelligent-learning-chatbot"
  },
  "id": "intelligent-learning-chatbot-phase2",
  "tags": [
    {
      "name": "chatbot",
      "createdAt": "2025-08-06T11:00:00.000Z"
    },
    {
      "name": "phase2",
      "createdAt": "2025-08-06T11:00:00.000Z"
    },
    {
      "name": "postgresql",
      "createdAt": "2025-08-06T11:00:00.000Z"
    },
    {
      "name": "session-management",
      "createdAt": "2025-08-06T11:00:00.000Z"
    }
  ]
}